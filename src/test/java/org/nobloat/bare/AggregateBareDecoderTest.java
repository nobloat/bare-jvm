package org.nobloat.bare;

import org.junit.jupiter.api.Test;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;

class AggregateBareDecoderTest {

    private InputStream fromInts(int... bytes) {
        byte[] b = new byte[bytes.length];
        for (int i = 0; i < bytes.length; i++) {
            b[i] = (byte) bytes[i];
        }
        return new ByteArrayInputStream(b);
    }

    @Test
    public void testOptional() throws IOException {
        var stream = fromInts(0x01, 0x1B, 0xE3, 0x81, 0x93, 0xE3, 0x82, 0x93, 0xE3,
                0x81, 0xAB, 0xE3, 0x81, 0xA1, 0xE3, 0x81, 0xAF, 0xE3, 0x80, 0x81, 0xE4,
                0xB8, 0x96, 0xE7, 0x95, 0x8C, 0xEF, 0xBC, 0x81);


        var decoder = new AggregateBareDecoder(stream);
        Optional<String> result = decoder.optional(String.class);
        assertEquals("こんにちは、世界！", result.get());

        stream = fromInts(0x00);
        decoder = new AggregateBareDecoder(stream);
        result = decoder.optional(String.class);
        assertFalse(result.isPresent());
    }

    @Test
    public void testStaticArray() throws IOException {
        var stream = fromInts(0x1B, 0xE3, 0x81, 0x93, 0xE3, 0x82, 0x93, 0xE3,
                0x81, 0xAB, 0xE3, 0x81, 0xA1, 0xE3, 0x81, 0xAF, 0xE3, 0x80, 0x81, 0xE4,
                0xB8, 0x96, 0xE7, 0x95, 0x8C, 0xEF, 0xBC, 0x81, 0x1B, 0xE3, 0x81, 0x93, 0xE3, 0x82, 0x93, 0xE3,
                0x81, 0xAB, 0xE3, 0x81, 0xA1, 0xE3, 0x81, 0xAF, 0xE3, 0x80, 0x81, 0xE4,
                0xB8, 0x96, 0xE7, 0x95, 0x8C, 0xEF, 0xBC, 0x81, 0x1B, 0xE3, 0x81, 0x93, 0xE3, 0x82, 0x93, 0xE3,
                0x81, 0xAB, 0xE3, 0x81, 0xA1, 0xE3, 0x81, 0xAF, 0xE3, 0x80, 0x81, 0xE4,
                0xB8, 0x96, 0xE7, 0x95, 0x8C, 0xEF, 0xBC, 0x81);

        var decoder = new AggregateBareDecoder(stream);
        var result = decoder.values(String.class, 3);

        assertEquals(3, result.size());
        assertEquals("こんにちは、世界！", result.get(0));
        assertEquals("こんにちは、世界！", result.get(1));
        assertEquals("こんにちは、世界！", result.get(2));
    }

    @Test
    public void testSlice() throws IOException {
        var stream = fromInts(0x03, 0x1B, 0xE3, 0x81, 0x93, 0xE3, 0x82, 0x93, 0xE3,
                0x81, 0xAB, 0xE3, 0x81, 0xA1, 0xE3, 0x81, 0xAF, 0xE3, 0x80, 0x81, 0xE4,
                0xB8, 0x96, 0xE7, 0x95, 0x8C, 0xEF, 0xBC, 0x81, 0x1B, 0xE3, 0x81, 0x93, 0xE3, 0x82, 0x93, 0xE3,
                0x81, 0xAB, 0xE3, 0x81, 0xA1, 0xE3, 0x81, 0xAF, 0xE3, 0x80, 0x81, 0xE4,
                0xB8, 0x96, 0xE7, 0x95, 0x8C, 0xEF, 0xBC, 0x81, 0x1B, 0xE3, 0x81, 0x93, 0xE3, 0x82, 0x93, 0xE3,
                0x81, 0xAB, 0xE3, 0x81, 0xA1, 0xE3, 0x81, 0xAF, 0xE3, 0x80, 0x81, 0xE4,
                0xB8, 0x96, 0xE7, 0x95, 0x8C, 0xEF, 0xBC, 0x81);

        var decoder = new AggregateBareDecoder(stream);
        var result = decoder.values(String.class);

        assertEquals(3, result.size());
        assertEquals("こんにちは、世界！", result.get(0));
        assertEquals("こんにちは、世界！", result.get(1));
        assertEquals("こんにちは、世界！", result.get(2));
    }

    @Test
    public void testMap() throws IOException {
        var stream = fromInts(0x03, 0x01, 0x11, 0x02, 0x22, 0x03, 0x33);
        var decoder = new AggregateBareDecoder(stream);
        var result = decoder.map(Byte.class, Byte.class);

        assertEquals(3, result.size());
        assertEquals((byte)0x11, result.get((byte)0x01));
        assertEquals((byte)0x22, result.get((byte)0x02));
        assertEquals((byte)0x33, result.get((byte)0x03));
    }

    @Test
    public void testUnion() throws IOException {
        var stream = fromInts(0x01, 0x1B, 0xE3, 0x81, 0x93, 0xE3, 0x82, 0x93, 0xE3,
                0x81, 0xAB, 0xE3, 0x81, 0xA1, 0xE3, 0x81, 0xAF, 0xE3, 0x80, 0x81, 0xE4,
                0xB8, 0x96, 0xE7, 0x95, 0x8C, 0xEF, 0xBC, 0x81);

        var decoder = new AggregateBareDecoder(stream);

        var result = decoder.union(Float.class, String.class);
        assertEquals(1, result.typeId);
        assertEquals("こんにちは、世界！", result.value);


        stream = fromInts(0x00, 0x71, 0x2D, 0xA7, 0x44);
        decoder = new AggregateBareDecoder(stream);
        result = decoder.union(Float.class, String.class);
        assertEquals(0, result.typeId);
        assertEquals(1337.42, (Float) result.value, 0.001);
    }

}